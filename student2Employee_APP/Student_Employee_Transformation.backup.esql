/**
CREATE COMPUTE MODULE Student_Employee_Transformation_Modular
	
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		DECLARE inRef REFERENCE TO InputRoot;
		DECLARE outRef REFERENCE TO OutputRoot;
		CALL ProcessStudentApplication(inRef,outRef);
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
	
	CREATE PROCEDURE CreateApplicantMessage(IN InputRoot REFERENCE, 
											INOUT OutputRoot REFERENCE,
											IN vAge INT,
											IN vGrade CHAR) BEGIN
		-- START # TRANSFORMATION
		-- Transformation from Student Application to University Applicant
		SET OutputRoot.XMLNSC.Applicant.Name.FirstName = InputRoot.XMLNSC.Student.Firstname;
		SET OutputRoot.XMLNSC.Applicant.Name.LastName = InputRoot.XMLNSC.Student.Lastname;
		
		SET OutputRoot.XMLNSC.Applicant.Age = vAge;
		SET OutputRoot.XMLNSC.Applicant.Gender = InputRoot.XMLNSC.Student.Sex;
		
		SET OutputRoot.XMLNSC.Applicant.Contacts.Phone = InputRoot.XMLNSC.Student.Phone;
		SET OutputRoot.XMLNSC.Applicant.Contacts.Email = InputRoot.XMLNSC.Student.Email;
		SET OutputRoot.XMLNSC.Applicant.Course = InputRoot.XMLNSC.Student.Course;
		
		SET OutputRoot.XMLNSC.Applicant.Grade = vGrade;
	END;
	
	CREATE PROCEDURE SetUniversities(IN vGrade CHAR) BEGIN
		IF (vGrade = GRADE_AAA) THEN
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = CALIFORNIA_Q;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[2].queueName = MIT_Q;
		ELSEIF (vGrade = GRADE_AA ) THEN
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = CALIFORNIA_Q;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[2].queueName = STANFORD_Q;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[3].queueName = MIT_Q;
		ELSEIF (vGrade = GRADE_A ) THEN
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = HARVARD_Q;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[2].queueName = PRINCTON_Q;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[3].queueName = MIT_Q;
		ELSEIF (vGrade =  GRADE_B ) THEN
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = HARVARD_Q;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[2].queueName = PRINCTON_Q;
		END IF;
	END;

	CREATE PROCEDURE ProcessStudentApplication( IN InputRoot REFERENCE, 
												INOUT OutputRoot REFERENCE) BEGIN
		-- Declaration variables & capture, generate values * 
		DECLARE vPercentage, marksAchived, marksTotal FLOAT;
		DECLARE vGrade CHAR; -- A++ | A+ | A | B | C
		
		DECLARE vYear INT;
		SET vYear = EXTRACT(YEAR FROM CURRENT_DATE);

		DECLARE yearOfBirth, vAge INT;
		 
		SET yearOfBirth = InputRoot.XMLNSC.Student.YearOfBirth;
		--SET yearOfBirth = CAST(InputRoot.XMLNSC.Student.YearOfBirth AS INT);
		-- Get age by substracting current year - students year of birth
		SET vAge = vYear - yearOfBirth;
		
		SET marksAchived = CAST(InputRoot.XMLNSC.Student.Marks.Achieved AS FLOAT);
		SET marksTotal = CAST(InputRoot.XMLNSC.Student.Marks.OutOf AS FLOAT);
		
		-- generate percentsge based on achived marks for total marks
		SET vPercentage = (marksAchived / marksTotal) * PERCENTAGE_RANGE; 
		
		IF (vPercentage > PERCENT_90) THEN
			SET vGrade = GRADE_AAA;
		ELSEIF (vPercentage >= PERCENT_75 AND vPercentage <= PERCENT_90) THEN
			SET vGrade = GRADE_AA;
		ELSEIF (vPercentage >= PERCENT_60 AND vPercentage < PERCENT_75) THEN
			SET vGrade = GRADE_A;
		ELSEIF (vPercentage >= PERCENT_50 AND vPercentage < PERCENT_60) THEN
			SET vGrade = GRADE_B;
		ELSE
			SET vGrade = GRADE_C;
		END IF;
		
		CALL CreateApplicantMessage(InputRoot, OutputRoot, vAge, vGrade);
		
		CALL SetUniversities(vGrade);
		
		-- END #  TRANSFORMATION
	END;
	
	
END MODULE;

**/
